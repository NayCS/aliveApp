{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\nayel\\\\Desktop\\\\aliveApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\nayel\\\\Desktop\\\\aliveApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\nayel\\\\Desktop\\\\aliveApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\nayel\\\\Desktop\\\\aliveApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\nayel\\\\Desktop\\\\aliveApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\nayel\\\\Desktop\\\\aliveApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\nayel\\\\Desktop\\\\aliveApp\\\\client\\\\src\\\\pages\\\\Blood.js\";\nimport React, { Component } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, FormBtn } from \"../components/Form\";\n\nvar Blood =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Blood, _Component);\n\n  function Blood() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Blood);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Blood)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      blood: [],\n      glucose: \"\",\n      ketone: \"\"\n    };\n\n    _this.loadBlood = function () {\n      API.getBloods().then(function (res) {\n        return _this.setState({\n          blood: res.data,\n          glucose: \"\",\n          ketone: \"\"\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    };\n\n    _this.deleteBlood = function (id) {\n      API.deleteBlood(id).then(function (res) {\n        return _this.loadBlood();\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    };\n\n    _this.handleInputChange = function (event) {\n      var _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n\n      _this.setState(_defineProperty({}, name, value));\n    };\n\n    _this.handleFormSubmit = function (event) {\n      event.preventDefault();\n\n      if (_this.state.glucose && _this.state.ketone) {\n        API.saveBlood({\n          glucose: _this.state.glucose,\n          ketone: _this.state.ketone\n        }).then(function (res) {\n          return _this.loadBlood();\n        }).catch(function (err) {\n          return console.log(err);\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Blood, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadBlood();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Container, {\n        fluid: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(Col, {\n        size: \"md-7\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Track your Glucose Ketone Index\")), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"What is GKI?\"))), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Glucose Ketone Index (GKI), is a simple formula that tracks the ratio of blood glucose to ketones as a single value. But more important, it\\u2019s a biomarker for tracking your metabolic health as well as your level of ketosis, and it\\u2019s easily tracked if you have a blood glucose and ketones testing meter.\")), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Why is GKI important to you?\"))), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"Once you know your GKI, you can use it as a tool to help track your ketosis and general metabolic status. In the medical industry, it is also becoming an increasingly important measure for therapeutic ketosis used to manage chronic health conditions, including certain types of cancer, type 2 diabetes, obesity, Alzheimer\\u2019s disease, Parkinson\\u2019s, chronic inflammatory diseases, epilepsy, insulin resistance, and traumatic brain injury!\")), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Input Fasting Glucose level:\")), React.createElement(Input, {\n        value: this.state.glucose,\n        onChange: this.handleInputChange,\n        name: \"glucose\",\n        placeholder: \"Glucose (Required in (mg/dL))\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Input Fasting Ketone level:\")), React.createElement(Input, {\n        value: this.state.ketone,\n        onChange: this.handleInputChange,\n        name: \"ketone\",\n        placeholder: \"Ketones (Required in (mmol/L))\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }), React.createElement(FormBtn, {\n        disabled: !(this.state.glucose && this.state.ketone),\n        onClick: this.handleFormSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Get your GKI\"))), React.createElement(Col, {\n        size: \"md-5 sm12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"Your Blood Metrics\")), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"Your Glucose Ketone Index Level:\")), this.state.blood.length ? React.createElement(List, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, this.state.blood.map(function (blood) {\n        return React.createElement(ListItem, {\n          key: blood._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"../bloods/\" + blood._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        }, React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        }, blood.glucose / 18.2 / blood.ketone)), React.createElement(DeleteBtn, {\n          onClick: function onClick() {\n            return _this2.deleteBlood(blood._id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        }));\n      })) : React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"No resutls to Display\"))));\n    }\n  }]);\n\n  return Blood;\n}(Component);\n\nexport default Blood;","map":{"version":3,"sources":["C:/Users/nayel/Desktop/aliveApp/client/src/pages/Blood.js"],"names":["React","Component","DeleteBtn","Jumbotron","API","Link","Col","Row","Container","List","ListItem","Input","FormBtn","Blood","state","blood","glucose","ketone","loadBlood","getBloods","then","res","setState","data","catch","err","console","log","deleteBlood","id","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","saveBlood","length","map","_id"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\"; import { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, FormBtn } from \"../components/Form\";\n\n\n\nclass Blood extends Component {\n    state = {\n        blood: [],\n        glucose: \"\",\n        ketone: \"\"\n    };\n\n    componentDidMount() {\n        this.loadBlood();\n    }\n\n    loadBlood = () => {\n        API.getBloods()\n            .then(res =>\n                this.setState({\n                    blood: res.data,\n                    glucose: \"\",\n                    ketone: \"\"\n\n                })\n            )\n            .catch(err => console.log(err));\n    };\n\n    deleteBlood = id => {\n        API.deleteBlood(id)\n            .then(res => this.loadBlood())\n            .catch(err => console.log(err));\n    };\n\n    handleInputChange = event => {\n        const { name, value } = event.target;\n        this.setState({\n            [name]: value\n        });\n    };\n\n    handleFormSubmit = event => {\n        event.preventDefault();\n        if (this.state.glucose && this.state.ketone) {\n            API.saveBlood({\n                glucose: this.state.glucose,\n                ketone: this.state.ketone\n            })\n                .then(res => this.loadBlood())\n                .catch(err => console.log(err));\n        }\n    }\n\n\n\n    render() {\n        return (\n            <Container fluid >\n                <Row>\n                    <Col size=\"md-7\">\n                        <Jumbotron>\n                            <h1>Track your Glucose Ketone Index</h1>\n                        </Jumbotron>\n                        <form>\n\n                            <label>\n                                <strong>\n                                    <h2>What is GKI?</h2>\n                                </strong>\n                            </label>\n\n                            <label>\n\n                                <h4>Glucose Ketone Index (GKI), is a simple formula that tracks the\n                                     ratio of blood glucose to ketones as a single value. But more important,\n                                     it’s a biomarker for tracking your metabolic health as well as your level of ketosis,\n                                          and it’s easily tracked if you have a blood glucose and ketones testing meter.</h4>\n\n                            </label>\n\n\n                            <label>\n                                <strong>\n                                    <h2>Why is GKI important to you?</h2>\n                                </strong>\n                            </label>\n\n                            <label>\n\n                                <h4>Once you know your GKI, you can use it as a tool to help track your ketosis and general metabolic status.\n                                     In the medical industry, it is also becoming an increasingly important measure for therapeutic ketosis\n                                     used to manage chronic health conditions, including certain types of cancer, type 2 diabetes, obesity,\n                                      Alzheimer’s disease, Parkinson’s, chronic inflammatory diseases, epilepsy, insulin resistance, and\n                                      traumatic brain injury!\n\n\n                                      </h4>\n\n                            </label>\n\n                            <label>\n                                <strong>\n                                    Input Fasting Glucose level:\n                            </strong>\n                            </label>\n\n                            <Input\n                                value={this.state.glucose}\n                                onChange={this.handleInputChange}\n                                name=\"glucose\"\n                                placeholder=\"Glucose (Required in (mg/dL))\"\n                            />\n                            <label>\n                                <strong>\n                                    Input Fasting Ketone level:\n                            </strong>\n                            </label>\n\n                            <Input\n                                value={this.state.ketone}\n                                onChange={this.handleInputChange}\n                                name=\"ketone\"\n                                placeholder=\"Ketones (Required in (mmol/L))\"\n                            />\n\n                            <FormBtn\n                                disabled={!(this.state.glucose && this.state.ketone)}\n                                onClick={this.handleFormSubmit}\n                            >\n                                Get your GKI\n                            </FormBtn>\n\n\n\n\n\n\n\n                        </form>\n\n\n\n                    </Col>\n\n                    <Col size=\"md-5 sm12\">\n                        <Jumbotron>\n                            <h1>Your Blood Metrics</h1>\n                        </Jumbotron>\n                        <label>\n                            <strong>\n                                Your Glucose Ketone Index Level:\n                            </strong>\n                        </label>\n\n                        {this.state.blood.length ? (\n                            <List>\n                                {this.state.blood.map(blood => (\n                                    <ListItem key={blood._id}>\n                                        <Link to={\"../bloods/\" + blood._id}>\n                                            <strong>\n                                                {(blood.glucose / 18.2) / (blood.ketone)}\n                                            </strong>\n                                        </Link>\n                                        <DeleteBtn onClick={() => this.deleteBlood(blood._id)} />\n                                    </ListItem>\n                                ))}\n\n                            </List>\n                        ) : (\n                                <h3>No resutls to Display</h3>\n                            )\n                        }\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\n\nexport default Blood;\n\n"]},"metadata":{},"sourceType":"module"}